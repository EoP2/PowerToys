<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="..\..\..\Common.Dotnet.CsWinRT.props" />
  <Import Project="..\..\..\CmdPalVersion.props" />
  <Import Project="..\Microsoft.CmdPal.UI\CmdPal.pre.props" />

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <RootNamespace>Microsoft.CmdPal.Core.UI</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <PublishProfile>win-$(Platform).pubxml</PublishProfile>
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>

    <Version>$(CmdPalVersion)</Version>

    <!-- OutputPath is set in CmdPal.Branding.props  -->

    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
  </PropertyGroup>

  <!-- Branding -->
  <PropertyGroup>
    <ApplicationIcon>$(SolutionDir)\src\modules\cmdpal\Microsoft.CmdPal.UI\Assets\Dev\icon.ico</ApplicationIcon>
    <CmdPalAssetSuffix>Dev</CmdPalAssetSuffix>
  </PropertyGroup>
  <ItemGroup>
    <!-- Images -->
    <Content Include="$(SolutionDir)\src\modules\cmdpal\Microsoft.CmdPal.UI\Assets\$(CmdPalAssetSuffix)\**\*">
      <DeploymentContent>true</DeploymentContent>
      <Link>Assets\%(RecursiveDir)%(FileName)%(Extension)</Link>
    </Content>
    
    <Manifest Include="$(ApplicationManifest)" />

    <AppxManifest Include="Package.appxmanifest" />
  </ItemGroup>

  <PropertyGroup>
    <!-- This lets us actually reference types from Microsoft.Terminal.UI -->
    <!-- <CsWinRTIncludes>Microsoft.Terminal.UI;</CsWinRTIncludes> -->
    <CsWinRTGeneratedFilesDir>$(OutDir)</CsWinRTGeneratedFilesDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- This disables the auto-generated main, so we can be single-instanced -->
    <DefineConstants>DISABLE_XAML_GENERATED_MAIN</DefineConstants>
  </PropertyGroup>

  <!-- BODGY: XES Versioning and WinAppSDK get into a fight about the app manifest, which breaks WinAppSDK. -->
  <Target Name="RearrangeXefVersioningAndWinAppSDKResourceGeneration" DependsOnTargets="GetNewAppManifestValues;CreateWinRTRegistration" BeforeTargets="XesWriteVersionInfoResourceFile">
    <PropertyGroup>
      <!-- XES uses this property to store the "final" location of the app manifest, before it erases it.
           We have to update it to the value WinAppSDK set it to. -->
      <OriginalApplicationManifest>$(ApplicationManifest.Replace("$(MSBuildProjectDirectory)\",""))</OriginalApplicationManifest>
    </PropertyGroup>
    <Message Importance="High" Text="Updated final manifest path to $(OriginalApplicationManifest)" />
  </Target>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.WinUI.Controls.Primitives" />
    <PackageReference Include="CommunityToolkit.WinUI.Controls.SettingsControls" />
    <PackageReference Include="CommunityToolkit.WinUI.Converters" />
    <PackageReference Include="CommunityToolkit.WinUI.Animations" />
    <PackageReference Include="CommunityToolkit.WinUI.Extensions" />
    <PackageReference Include="CommunityToolkit.WinUI.UI.Controls.Markdown" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" />
    <PackageReference Include="Microsoft.WindowsAppSDK" />
    <PackageReference Include="Microsoft.Xaml.Behaviors.WinUI.Managed" />
	  <PackageReference Include="WinUIEx" />
    <PackageReference Include="Microsoft.Windows.CsWin32">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>

    <PackageReference Include="Microsoft.Extensions.Hosting" />

    <PackageReference Include="System.Net.Http" />

    <PackageReference Include="System.Private.Uri" />
    <PackageReference Include="System.Text.Json" />

    <PackageReference Include="System.Text.RegularExpressions" />
  </ItemGroup>

  <!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>

  <ItemGroup>
	<RdXmlFile Include="rd.xml" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.CmdPal.Common\Microsoft.CmdPal.Common.csproj" />
    <ProjectReference Include="..\Microsoft.CmdPal.Core.ViewModels\Microsoft.CmdPal.Core.ViewModels.csproj" />
    <ProjectReference Include="..\Microsoft.CmdPal.Core.Control\Microsoft.CmdPal.Core.Control.csproj" />
    <ProjectReference Include="..\extensionsdk\Microsoft.CommandPalette.Extensions.Toolkit\Microsoft.CommandPalette.Extensions.Toolkit.csproj" />

    <!-- As a test: -->
    <ProjectReference Include="..\ext\Microsoft.CmdPal.Ext.Shell\Microsoft.CmdPal.Ext.Shell.csproj" />
    
  </ItemGroup>

</Project>
