# Minimal UI Tests Build Template
# This template only builds UI test projects and stages their test DLLs for consumption by test pipelines

parameters:
  - name: buildConfigurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
  - name: condition
    type: string
    default: ''
  - name: dependsOn
    type: object
    default: []
  - name: pool
    type: object
    default: []
  - name: variables
    type: object
    default: {}
  - name: uiTestProjectPattern
    type: string
    default: '*UITest*.csproj'

jobs:
- job: BuildUITests
  ${{ if ne(length(parameters.pool), 0) }}:
    pool: ${{ parameters.pool }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  strategy:
    matrix:
      ${{ each config in parameters.buildConfigurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ config }}_${{ platform }}:
            BuildConfiguration: ${{ config }}
            BuildPlatform: ${{ platform }}
  variables:
    JobOutputDirectory: $(Build.ArtifactStagingDirectory)
    LogOutputDirectory: $(Build.ArtifactStagingDirectory)\logs
    JobOutputArtifactName: build-uitests-$(BuildPlatform)-$(BuildConfiguration)
    NUGET_RESTORE_MSBUILD_ARGS: /p:Platform=$(BuildPlatform)
    ${{ insert }}: ${{ parameters.variables }}
  displayName: Build UI Tests Only
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 1
  templateContext:
    outputs:
    - output: pipelineArtifact
      artifactName: $(JobOutputArtifactName)
      targetPath: $(Build.ArtifactStagingDirectory)
  steps:
  - checkout: self
    clean: true
    submodules: true
    persistCredentials: True
    fetchTags: false
    fetchDepth: 1

  - template: steps-ensure-dotnet-version.yml
    parameters:
      sdk: true
      version: '9.0'

  - template: .\steps-restore-nuget.yml

  - task: NuGetCommand@2
    displayName: Restore solution-level NuGet packages
    inputs:
      command: restore
      feedsToUse: config
      configPath: nuget.config
      restoreSolution: PowerToys.sln
      restoreDirectory: '$(Build.SourcesDirectory)\packages'

  # Dynamically discover and build UI test projects
  - pwsh: |
      $uiTestProjects = @()
      
      # Search for UI test projects using the pattern
      $projectFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "${{ parameters.uiTestProjectPattern }}" -Recurse
      
      Write-Host "Found $($projectFiles.Count) UI test projects:"
      foreach ($project in $projectFiles) {
        $relativePath = $project.FullName.Replace("$(Build.SourcesDirectory)\", "").Replace("\", "/")
        Write-Host "  - $relativePath"
        $uiTestProjects += $relativePath
      }
      
      if ($uiTestProjects.Count -eq 0) {
        Write-Host "##vso[task.logissue type=warning]No UI test projects found with pattern: ${{ parameters.uiTestProjectPattern }}"
        exit 0
      }
      
      # Build each discovered project
      foreach ($project in $uiTestProjects) {
        Write-Host "Building project: $project"
        
        # Generate safe artifact name for logging
        $artifactName = $project -replace '[/\\]', '_' -replace '\.csproj$', ''
        
        # Use VSBuild for consistency with the main build pipeline
        $msbuildArgs = @(
          "-restore",
          "-graph",
          "/p:RestorePackagesConfig=true",
          "/p:BuildProjectReferences=true", 
          "/p:CIBuild=true",
          "/bl:$(LogOutputDirectory)\build-$artifactName.binlog",
          "$(NUGET_RESTORE_MSBUILD_ARGS)"
        )
        
        $arguments = @{
          'FilePath' = 'dotnet'
          'ArgumentList' = @(
            'build', 
            $project,
            '--configuration', '$(BuildConfiguration)',
            '--verbosity', 'minimal'
          ) + $msbuildArgs
          'WorkingDirectory' = '$(Build.SourcesDirectory)'
          'NoNewWindow' = $true
          'Wait' = $true
          'PassThru' = $true
        }
        
        $process = Start-Process @arguments
        
        if ($process.ExitCode -ne 0) {
          Write-Host "##vso[task.logissue type=error]Build failed for project: $project"
          exit $process.ExitCode
        }
        
        Write-Host "Successfully built: $project"
      }
      
      Write-Host "All UI test projects built successfully!"
    displayName: Discover and Build UI Test Projects
    workingDirectory: $(Build.SourcesDirectory)

  # Stage test project outputs with directory structure
  - task: CopyFiles@2
    displayName: Stage UI Test Build Outputs
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: '$(BuildPlatform)/$(BuildConfiguration)/**/*'
      targetFolder: '$(JobOutputDirectory)\$(BuildPlatform)\$(BuildConfiguration)'

  - publish: $(JobOutputDirectory)
    artifact: $(JobOutputArtifactName)
    displayName: Publish UI Test artifacts
    condition: always()