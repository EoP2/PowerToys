# Minimal UI Tests Build Template
# This template only builds UI test projects and stages their test DLLs for consumption by test pipelines

parameters:
  - name: buildConfigurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
  - name: condition
    type: string
    default: ''
  - name: dependsOn
    type: object
    default: []
  - name: pool
    type: object
    default: []
  - name: variables
    type: object
    default: {}
  - name: uiTestProjectsToBuild
    type: object
    default:
      - 'src/modules/fancyzones/UITests-FancyZones/UITests-FancyZones.csproj'
      - 'src/modules/fancyzones/UITests-FancyZonesEditor/UITests-FancyZonesEditor.csproj'
      - 'src/modules/MouseUtils/MouseUtils.UITests/MouseUtils.UITests.csproj'
      - 'src/modules/Workspaces/WorkspacesEditorUITest/WorkspacesEditorUITest.csproj'
      - 'src/modules/imageresizer/tests/ImageResizerUITest.csproj'
      - 'src/modules/Hosts/Hosts.UITests/Hosts.UITests.csproj'

jobs:
- job: BuildUITests
  ${{ if ne(length(parameters.pool), 0) }}:
    pool: ${{ parameters.pool }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  strategy:
    matrix:
      ${{ each config in parameters.buildConfigurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ config }}_${{ platform }}:
            BuildConfiguration: ${{ config }}
            BuildPlatform: ${{ platform }}
  variables:
    JobOutputDirectory: $(Build.ArtifactStagingDirectory)
    LogOutputDirectory: $(Build.ArtifactStagingDirectory)\logs
    JobOutputArtifactName: build-$(BuildPlatform)-$(BuildConfiguration)
    NUGET_RESTORE_MSBUILD_ARGS: /p:Platform=$(BuildPlatform)
    ${{ insert }}: ${{ parameters.variables }}
  displayName: Build UI Tests Only
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 1
  templateContext:
    outputs:
    - output: pipelineArtifact
      artifactName: $(JobOutputArtifactName)
      targetPath: $(Build.ArtifactStagingDirectory)
  steps:
  - checkout: self
    clean: true
    submodules: true
    persistCredentials: True
    fetchTags: false
    fetchDepth: 1

  - template: steps-ensure-dotnet-version.yml
    parameters:
      sdk: true
      version: '9.0'

  - template: .\steps-restore-nuget.yml

  - task: NuGetCommand@2
    displayName: Restore solution-level NuGet packages
    inputs:
      command: restore
      feedsToUse: config
      configPath: nuget.config
      restoreSolution: PowerToys.sln
      restoreDirectory: '$(Build.SourcesDirectory)\packages'

  - pwsh: |
      Write-Host "##[section]Discovering UI Test Projects"
      
      # Search for all UITest project files
      $uiTestProjects = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter "*UITest*.csproj" | 
          Where-Object { 
              $_.FullName -notlike "*\obj\*" -and 
              $_.FullName -notlike "*UITestAutomation*" 
          }
      
      Write-Host "##[command]Found $($uiTestProjects.Count) UI Test projects:"
      foreach ($project in $uiTestProjects) {
          $relativePath = $project.FullName.Replace("$(Build.SourcesDirectory)\", "").Replace("\", "/")
          Write-Host "  - $relativePath"
      }
      
      if ($uiTestProjects.Count -eq 0) {
          Write-Host "##vso[task.logissue type=warning]No UI test projects found"
          exit 0
      }
      
      Write-Host "##[section]Building UI Test Projects"
      
      foreach ($project in $uiTestProjects) {
          $relativePath = $project.FullName.Replace("$(Build.SourcesDirectory)\", "").Replace("\", "/")
          $projectName = [System.IO.Path]::GetFileNameWithoutExtension($project.Name)
          $logFileName = "build-$($projectName.Replace('/', '_').Replace('\', '_')).binlog"
          
          Write-Host "##[command]Building: $relativePath"
          
          $msbuildArgs = @(
              $project.FullName,
              "-restore",
              "-graph",
              "/p:RestorePackagesConfig=true",
              "/p:BuildProjectReferences=true",
              "/p:CIBuild=true",
              "/bl:$(LogOutputDirectory)\$logFileName",
              "/p:Platform=$(BuildPlatform)",
              "/p:Configuration=$(BuildConfiguration)",
              "$(NUGET_RESTORE_MSBUILD_ARGS)"
          )
          
          & dotnet msbuild @msbuildArgs
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##vso[task.logissue type=error]Failed to build $relativePath"
              exit $LASTEXITCODE
          } else {
              Write-Host "##[command]Successfully built: $relativePath"
          }
      }
      
      Write-Host "##[section]Build completed successfully for all UI test projects"
    displayName: 'Discover and Build UI Test Projects'

  # Build only UI test projects
  # - ${{ each project in parameters.uiTestProjectsToBuild }}:
  #   - task: VSBuild@1
  #     displayName: Build UI Test Project ${{ project }}
  #     inputs:
  #       solution: ${{ project }}
  #       vsVersion: 17.0
  #       msbuildArgs: >-
  #         -restore
  #         -graph
  #         /p:RestorePackagesConfig=true
  #         /p:BuildProjectReferences=true
  #         /p:CIBuild=true
  #         /bl:$(LogOutputDirectory)\build-${{ join('_',split(project, '/')) }}.binlog
  #         $(NUGET_RESTORE_MSBUILD_ARGS)
  #       platform: $(BuildPlatform)
  #       configuration: $(BuildConfiguration)
  #       msbuildArchitecture: x64
  #       maximumCpuCount: true

  # Stage test project outputs with directory structure
  - task: CopyFiles@2
    displayName: Stage UI Test Build Outputs
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: '$(BuildPlatform)/$(BuildConfiguration)/**/*'
      targetFolder: '$(JobOutputDirectory)\$(BuildPlatform)\$(BuildConfiguration)'

  - publish: $(JobOutputDirectory)
    artifact: $(JobOutputArtifactName)
    displayName: Publish UI Test artifacts
    condition: always()